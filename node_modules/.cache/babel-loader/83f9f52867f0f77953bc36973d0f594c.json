{"ast":null,"code":"import React from'react';class CursorImitator extends React.Component{constructor(props){super(props);this.loadIntro=this.loadIntro.bind(this);this.loadCursorBlink=this.loadCursorBlink.bind(this);this.clearAllTimeoutsAndIntervals=this.clearAllTimeoutsAndIntervals.bind(this);this.state={mounted:false};this.ttw=0;// Time to Wait.\nthis.timeoutList=[];// List of all timeouts triggered.\n}componentDidMount(){this.setState({mounted:true});}componentWillUnmount(){this.clearAllTimeoutsAndIntervals();}clearAllTimeoutsAndIntervals(){if(this.timeoutList){this.timeoutList.forEach(timeout=>{clearTimeout(timeout);});}clearInterval(this.interval);}loadCursorBlink(ref,ttw,end,isLastSentence){let reference=ref;let self=this;let isEnd=end;const _this$props=this.props,nextLetterTime=_this$props.nextLetterTime,blinkSpeed=_this$props.blinkSpeed;const nextTimeOut=setTimeout(()=>{if(self.interval){clearInterval(self.interval);// 'self.lastReference' stores last shown sentence's reference, we remove the '|' symbol before creating a new interval\nif(self.lastReference&&self.lastReference.innerText.substring(self.lastReference.innerText.length-1)==='|'){self.lastReference.innerText=self.lastReference.innerText.substring(0,self.lastReference.innerText.length-1);}}if(!isLastSentence){self.interval=setInterval(()=>{self.lastReference=reference;if(isEnd){if(reference.innerText.substring(reference.innerText.length-1)==='|'){reference.innerText=reference.innerText.substring(0,reference.innerText.length-1);}else if(reference.innerText.substring(reference.innerText.length-1)!=='|'){reference.innerText=reference.innerText+'|';}}else{if(reference.innerText==='|'){reference.innerText='';}else if(reference.innerText===''){reference.innerText='|';}}},blinkSpeed);}else{}},ttw*nextLetterTime);this.timeoutList.push(nextTimeOut);}loadLetter(sentence,refName,isLastSentence){/* To retain content when accessed from within setTimeout */let sentenceLength=sentence.length;sentence.split('').forEach((letter,index)=>{let nextLetter=letter;let ttw=this.ttw++;let reference=refName;const _this$props2=this.props,nextLetterTime=_this$props2.nextLetterTime,waitAtEnd=_this$props2.waitAtEnd,waitAtStart=_this$props2.waitAtStart;let self=this;let currIndex=index;/* To create a Blink at the start of every Sentence */if(index===0){this.loadCursorBlink(self.refs[reference],this.ttw);this.ttw=this.ttw+waitAtStart/nextLetterTime;ttw=this.ttw;}this.timeout=setTimeout(()=>{if(self.interval){clearInterval(self.interval);// Clear any previous Intervals and removing blink\n}if(currIndex===0&&self.refs&&self.refs[reference]){// Adding '|' in the beginning of every sentence and  inserting incoming texts before that\nself.refs[reference].innerText='|';}if(nextLetter===' '&&self.refs&&self.refs[reference]){// Handling space\nreturn self.refs[reference].innerHTML=self.refs[reference].innerHTML.substring(0,self.refs[reference].innerHTML.length-1)+' |';}else if(self.refs&&self.refs[reference]){// adding next digit\nreturn self.refs[reference].innerText=self.refs[reference].innerText.substring(0,self.refs[reference].innerText.length-1)+nextLetter+'|';}},ttw*nextLetterTime);// incremented value for every sentence\nif(index===sentenceLength-1){// To clear it all at once if required\n/* To create a Blink at the End of every Sentence */this.loadCursorBlink(this.refs[reference],this.ttw,true,isLastSentence);this.ttw=this.ttw+waitAtEnd/nextLetterTime;}});}loadIntro(content){const contentLast=content.length-1;return/*#__PURE__*/React.createElement(\"div\",null,content.map((sentence,index)=>{const refName='line_'+index;const isLast=contentLast===index;return/*#__PURE__*/React.createElement(\"div\",{ref:refName,className:this.props.letterWrapClass},this.state.mounted&&this.loadLetter(sentence,refName,isLast));}));}render(){const _this$props3=this.props,content=_this$props3.content,className=_this$props3.className,style=_this$props3.style;return/*#__PURE__*/React.createElement(\"div\",{className:className,style:style},this.loadIntro(content));}}CursorImitator.defaultProps={content:'',nextLetterTime:75,waitAtEnd:500,waitAtStart:600,blinkSpeed:130,letterWrapClass:''};export default CursorImitator;","map":{"version":3,"sources":["/Users/pramodgobburi/Desktop/portfolio/src/components/CursorImitator.js"],"names":["React","CursorImitator","Component","constructor","props","loadIntro","bind","loadCursorBlink","clearAllTimeoutsAndIntervals","state","mounted","ttw","timeoutList","componentDidMount","setState","componentWillUnmount","forEach","timeout","clearTimeout","clearInterval","interval","ref","end","isLastSentence","reference","self","isEnd","nextLetterTime","blinkSpeed","nextTimeOut","setTimeout","lastReference","innerText","substring","length","setInterval","push","loadLetter","sentence","refName","sentenceLength","split","letter","index","nextLetter","waitAtEnd","waitAtStart","currIndex","refs","innerHTML","content","contentLast","map","isLast","letterWrapClass","render","className","style","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass CursorImitator extends React.Component {\n  static defaultProps = {\n    content: '',\n    nextLetterTime: 75,\n    waitAtEnd: 500,\n    waitAtStart: 600,\n    blinkSpeed: 130,\n    letterWrapClass: ''\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadIntro = this.loadIntro.bind(this);\n    this.loadCursorBlink = this.loadCursorBlink.bind(this);\n    this.clearAllTimeoutsAndIntervals = this.clearAllTimeoutsAndIntervals.bind(this);\n    this.state = {\n      mounted: false\n    };\n    this.ttw = 0;             // Time to Wait.\n    this.timeoutList = [];    // List of all timeouts triggered.\n  }\n\n  componentDidMount() {\n    this.setState({ mounted: true });\n  }\n\n  componentWillUnmount() {\n    this.clearAllTimeoutsAndIntervals()\n  }\n\n  clearAllTimeoutsAndIntervals() {\n    if (this.timeoutList) {\n      this.timeoutList.forEach((timeout) => {\n        clearTimeout(timeout);\n      });\n    }\n    clearInterval(this.interval);\n  }\n\n  loadCursorBlink(ref, ttw, end, isLastSentence) {\n    let reference = ref;\n    let self = this;\n    let isEnd = end;\n    const {nextLetterTime, blinkSpeed} = this.props;\n    const nextTimeOut = setTimeout(() => {\n      if (self.interval) {\n        clearInterval(self.interval);\n        // 'self.lastReference' stores last shown sentence's reference, we remove the '|' symbol before creating a new interval\n        if (self.lastReference && self.lastReference.innerText.substring(self.lastReference.innerText.length-1) === '|') {\n          self.lastReference.innerText = self.lastReference.innerText.substring(0, self.lastReference.innerText.length - 1);\n        }\n      }\n      if (!isLastSentence) {\n        self.interval = setInterval(() => {\n          self.lastReference = reference;\n          if (isEnd) {\n            if (reference.innerText.substring(reference.innerText.length - 1) === '|') {\n              reference.innerText = reference.innerText.substring(0, reference.innerText.length - 1);\n            } else if (reference.innerText.substring(reference.innerText.length - 1) !== '|') {\n              reference.innerText = reference.innerText + '|';\n            }\n          } else {\n            if (reference.innerText === '|') {\n              reference.innerText = '';\n            } else if (reference.innerText === '') {\n              reference.innerText = '|';\n            }\n          }\n        }, blinkSpeed);\n      } else {\n        \n      }\n    }, ttw * nextLetterTime);\n    this.timeoutList.push(nextTimeOut);\n  }\n\n  loadLetter(sentence, refName, isLastSentence) {\n    /* To retain content when accessed from within setTimeout */\n    let sentenceLength = sentence.length;\n    sentence.split('').forEach((letter, index) => {\n      let nextLetter = letter;\n      let ttw = this.ttw++;\n      let reference = refName;\n      const {nextLetterTime, waitAtEnd, waitAtStart} = this.props;\n      let self = this;\n      let currIndex = index;\n      /* To create a Blink at the start of every Sentence */\n      if (index === 0) {\n        this.loadCursorBlink(self.refs[reference], this.ttw);\n        this.ttw = this.ttw + (waitAtStart / nextLetterTime);\n        ttw = this.ttw;\n      }\n      this.timeout = setTimeout(() => {\n        if (self.interval) {\n          clearInterval(self.interval);       // Clear any previous Intervals and removing blink\n        }\n        if (currIndex === 0 && self.refs && self.refs[reference]) { // Adding '|' in the beginning of every sentence and  inserting incoming texts before that\n          self.refs[reference].innerText = '|';\n        }\n        if (nextLetter === ' ' && self.refs && self.refs[reference]) {  // Handling space\n          return self.refs[reference].innerHTML = self.refs[reference].innerHTML.substring(0, self.refs[reference].innerHTML.length - 1) + ' |';\n        } else if (self.refs && self.refs[reference]) {                 // adding next digit\n          return self.refs[reference].innerText = self.refs[reference].innerText.substring(0,self.refs[reference].innerText.length - 1) + nextLetter + '|';\n        }\n      }, ttw * nextLetterTime);  // incremented value for every sentence\n      if (index === sentenceLength - 1) {   // To clear it all at once if required\n        /* To create a Blink at the End of every Sentence */\n        this.loadCursorBlink(this.refs[reference], this.ttw, true, isLastSentence);\n        this.ttw = this.ttw + (waitAtEnd / nextLetterTime);\n      }\n    })\n  }\n\n  loadIntro(content) {\n    const contentLast = content.length - 1;\n    return(\n      <div>\n        {\n          content.map((sentence, index) => {\n            const refName = 'line_' + index;\n            const isLast = contentLast === index;\n            return (\n              <div ref={refName} className={this.props.letterWrapClass}>\n                {this.state.mounted && this.loadLetter(sentence, refName, isLast)}\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n\n  render() {\n    const {content, className, style} = this.props;\n    return (\n      <div className={className} style={style}>\n        {this.loadIntro(content)}\n      </div>\n    );\n  }\n}\n\n\nCursorImitator.propTypes = {\n  content: PropTypes.array,\n  className: PropTypes.string,\n  style: PropTypes.object\n};\n\nexport default CursorImitator;"]},"metadata":{},"sourceType":"module"}