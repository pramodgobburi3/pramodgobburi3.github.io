{"ast":null,"code":"var _jsxFileName = \"/Users/pramodgobburi/Desktop/portfolio/src/components/CursorImitator.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass CursorImitator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadIntro = this.loadIntro.bind(this);\n    this.loadCursorBlink = this.loadCursorBlink.bind(this);\n    this.clearAllTimeoutsAndIntervals = this.clearAllTimeoutsAndIntervals.bind(this);\n    this.state = {\n      mounted: false\n    };\n    this.ttw = 0; // Time to Wait.\n\n    this.timeoutList = []; // List of all timeouts triggered.\n  }\n\n  componentDidMount() {\n    this.setState({\n      mounted: true\n    });\n  }\n\n  componentWillUnmount() {\n    this.clearAllTimeoutsAndIntervals();\n  }\n\n  clearAllTimeoutsAndIntervals() {\n    if (this.timeoutList) {\n      this.timeoutList.forEach(timeout => {\n        clearTimeout(timeout);\n      });\n    }\n\n    clearInterval(this.interval);\n  }\n\n  loadCursorBlink(ref, ttw, end, isLastSentence) {\n    let reference = ref;\n    let self = this;\n    let isEnd = end;\n    const _this$props = this.props,\n          nextLetterTime = _this$props.nextLetterTime,\n          blinkSpeed = _this$props.blinkSpeed;\n    const nextTimeOut = setTimeout(() => {\n      if (self.interval) {\n        clearInterval(self.interval); // 'self.lastReference' stores last shown sentence's reference, we remove the '|' symbol before creating a new interval\n\n        if (self.lastReference && self.lastReference.innerText.substring(self.lastReference.innerText.length - 1) === '|') {\n          self.lastReference.innerText = self.lastReference.innerText.substring(0, self.lastReference.innerText.length - 1);\n        }\n      }\n\n      if (!isLastSentence) {\n        self.interval = setInterval(() => {\n          self.lastReference = reference;\n\n          if (isEnd) {\n            if (reference.innerText.substring(reference.innerText.length - 1) === '|') {\n              reference.innerText = reference.innerText.substring(0, reference.innerText.length - 1);\n            } else if (reference.innerText.substring(reference.innerText.length - 1) !== '|') {\n              reference.innerText = reference.innerText + '|';\n            }\n          } else {\n            if (reference.innerText === '|') {\n              reference.innerText = '';\n            } else if (reference.innerText === '') {\n              reference.innerText = '|';\n            }\n          }\n        }, blinkSpeed);\n      } else {}\n    }, ttw * nextLetterTime);\n    this.timeoutList.push(nextTimeOut);\n  }\n\n  loadLetter(sentence, refName, isLastSentence) {\n    /* To retain content when accessed from within setTimeout */\n    let sentenceLength = sentence.length;\n    sentence.split('').forEach((letter, index) => {\n      let nextLetter = letter;\n      let ttw = this.ttw++;\n      let reference = refName;\n      const _this$props2 = this.props,\n            nextLetterTime = _this$props2.nextLetterTime,\n            waitAtEnd = _this$props2.waitAtEnd,\n            waitAtStart = _this$props2.waitAtStart;\n      let self = this;\n      let currIndex = index;\n      /* To create a Blink at the start of every Sentence */\n\n      if (index === 0) {\n        this.loadCursorBlink(self.refs[reference], this.ttw);\n        this.ttw = this.ttw + waitAtStart / nextLetterTime;\n        ttw = this.ttw;\n      }\n\n      this.timeout = setTimeout(() => {\n        if (self.interval) {\n          clearInterval(self.interval); // Clear any previous Intervals and removing blink\n        }\n\n        if (currIndex === 0 && self.refs && self.refs[reference]) {\n          // Adding '|' in the beginning of every sentence and  inserting incoming texts before that\n          self.refs[reference].innerText = '|';\n        }\n\n        if (nextLetter === ' ' && self.refs && self.refs[reference]) {\n          // Handling space\n          return self.refs[reference].innerHTML = self.refs[reference].innerHTML.substring(0, self.refs[reference].innerHTML.length - 1) + ' |';\n        } else if (self.refs && self.refs[reference]) {\n          // adding next digit\n          return self.refs[reference].innerText = self.refs[reference].innerText.substring(0, self.refs[reference].innerText.length - 1) + nextLetter + '|';\n        }\n      }, ttw * nextLetterTime); // incremented value for every sentence\n\n      if (index === sentenceLength - 1) {\n        // To clear it all at once if required\n\n        /* To create a Blink at the End of every Sentence */\n        this.loadCursorBlink(this.refs[reference], this.ttw, true, isLastSentence);\n        this.ttw = this.ttw + waitAtEnd / nextLetterTime;\n      }\n    });\n  }\n\n  loadIntro(content) {\n    const contentLast = content.length - 1;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, content.map((sentence, index) => {\n      const refName = 'line_' + index;\n      const isLast = contentLast === index;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: refName,\n        className: this.props.letterWrapClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }\n      }, this.state.mounted && this.loadLetter(sentence, refName, isLast));\n    }));\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          content = _this$props3.content,\n          className = _this$props3.className,\n          style = _this$props3.style;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: className,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, this.loadIntro(content));\n  }\n\n}\n\nCursorImitator.defaultProps = {\n  content: '',\n  nextLetterTime: 50,\n  waitAtEnd: 500,\n  waitAtStart: 200,\n  blinkSpeed: 130,\n  letterWrapClass: ''\n};\nCursorImitator.propTypes = {\n  content: PropTypes.array,\n  className: PropTypes.string,\n  style: PropTypes.object\n};\nexport default CursorImitator;","map":{"version":3,"sources":["/Users/pramodgobburi/Desktop/portfolio/src/components/CursorImitator.js"],"names":["React","PropTypes","CursorImitator","Component","constructor","props","loadIntro","bind","loadCursorBlink","clearAllTimeoutsAndIntervals","state","mounted","ttw","timeoutList","componentDidMount","setState","componentWillUnmount","forEach","timeout","clearTimeout","clearInterval","interval","ref","end","isLastSentence","reference","self","isEnd","nextLetterTime","blinkSpeed","nextTimeOut","setTimeout","lastReference","innerText","substring","length","setInterval","push","loadLetter","sentence","refName","sentenceLength","split","letter","index","nextLetter","waitAtEnd","waitAtStart","currIndex","refs","innerHTML","content","contentLast","map","isLast","letterWrapClass","render","className","style","defaultProps","propTypes","array","string","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass CursorImitator extends React.Component {\n  static defaultProps = {\n    content: '',\n    nextLetterTime: 50,\n    waitAtEnd: 500,\n    waitAtStart: 200,\n    blinkSpeed: 130,\n    letterWrapClass: ''\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadIntro = this.loadIntro.bind(this);\n    this.loadCursorBlink = this.loadCursorBlink.bind(this);\n    this.clearAllTimeoutsAndIntervals = this.clearAllTimeoutsAndIntervals.bind(this);\n    this.state = {\n      mounted: false\n    };\n    this.ttw = 0;             // Time to Wait.\n    this.timeoutList = [];    // List of all timeouts triggered.\n  }\n\n  componentDidMount() {\n    this.setState({ mounted: true });\n  }\n\n  componentWillUnmount() {\n    this.clearAllTimeoutsAndIntervals()\n  }\n\n  clearAllTimeoutsAndIntervals() {\n    if (this.timeoutList) {\n      this.timeoutList.forEach((timeout) => {\n        clearTimeout(timeout);\n      });\n    }\n    clearInterval(this.interval);\n  }\n\n  loadCursorBlink(ref, ttw, end, isLastSentence) {\n    let reference = ref;\n    let self = this;\n    let isEnd = end;\n    const {nextLetterTime, blinkSpeed} = this.props;\n    const nextTimeOut = setTimeout(() => {\n      if (self.interval) {\n        clearInterval(self.interval);\n        // 'self.lastReference' stores last shown sentence's reference, we remove the '|' symbol before creating a new interval\n        if (self.lastReference && self.lastReference.innerText.substring(self.lastReference.innerText.length-1) === '|') {\n          self.lastReference.innerText = self.lastReference.innerText.substring(0, self.lastReference.innerText.length - 1);\n        }\n      }\n      if (!isLastSentence) {\n        self.interval = setInterval(() => {\n          self.lastReference = reference;\n          if (isEnd) {\n            if (reference.innerText.substring(reference.innerText.length - 1) === '|') {\n              reference.innerText = reference.innerText.substring(0, reference.innerText.length - 1);\n            } else if (reference.innerText.substring(reference.innerText.length - 1) !== '|') {\n              reference.innerText = reference.innerText + '|';\n            }\n          } else {\n            if (reference.innerText === '|') {\n              reference.innerText = '';\n            } else if (reference.innerText === '') {\n              reference.innerText = '|';\n            }\n          }\n        }, blinkSpeed);\n      } else {\n        \n      }\n    }, ttw * nextLetterTime);\n    this.timeoutList.push(nextTimeOut);\n  }\n\n  loadLetter(sentence, refName, isLastSentence) {\n    /* To retain content when accessed from within setTimeout */\n    let sentenceLength = sentence.length;\n    sentence.split('').forEach((letter, index) => {\n      let nextLetter = letter;\n      let ttw = this.ttw++;\n      let reference = refName;\n      const {nextLetterTime, waitAtEnd, waitAtStart} = this.props;\n      let self = this;\n      let currIndex = index;\n      /* To create a Blink at the start of every Sentence */\n      if (index === 0) {\n        this.loadCursorBlink(self.refs[reference], this.ttw);\n        this.ttw = this.ttw + (waitAtStart / nextLetterTime);\n        ttw = this.ttw;\n      }\n      this.timeout = setTimeout(() => {\n        if (self.interval) {\n          clearInterval(self.interval);       // Clear any previous Intervals and removing blink\n        }\n        if (currIndex === 0 && self.refs && self.refs[reference]) { // Adding '|' in the beginning of every sentence and  inserting incoming texts before that\n          self.refs[reference].innerText = '|';\n        }\n        if (nextLetter === ' ' && self.refs && self.refs[reference]) {  // Handling space\n          return self.refs[reference].innerHTML = self.refs[reference].innerHTML.substring(0, self.refs[reference].innerHTML.length - 1) + ' |';\n        } else if (self.refs && self.refs[reference]) {                 // adding next digit\n          return self.refs[reference].innerText = self.refs[reference].innerText.substring(0,self.refs[reference].innerText.length - 1) + nextLetter + '|';\n        }\n      }, ttw * nextLetterTime);  // incremented value for every sentence\n      if (index === sentenceLength - 1) {   // To clear it all at once if required\n        /* To create a Blink at the End of every Sentence */\n        this.loadCursorBlink(this.refs[reference], this.ttw, true, isLastSentence);\n        this.ttw = this.ttw + (waitAtEnd / nextLetterTime);\n      }\n    })\n  }\n\n  loadIntro(content) {\n    const contentLast = content.length - 1;\n    return(\n      <div>\n        {\n          content.map((sentence, index) => {\n            const refName = 'line_' + index;\n            const isLast = contentLast === index;\n            return (\n              <div ref={refName} className={this.props.letterWrapClass}>\n                {this.state.mounted && this.loadLetter(sentence, refName, isLast)}\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n\n  render() {\n    const {content, className, style} = this.props;\n    return (\n      <div className={className} style={style}>\n        {this.loadIntro(content)}\n      </div>\n    );\n  }\n}\n\n\nCursorImitator.propTypes = {\n  content: PropTypes.array,\n  className: PropTypes.string,\n  style: PropTypes.object\n};\n\nexport default CursorImitator;"]},"metadata":{},"sourceType":"module"}